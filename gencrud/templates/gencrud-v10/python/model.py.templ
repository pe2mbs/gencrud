#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2021 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
import webapp2.api as API
import toastedmarshmallow
from sqlalchemy import event
import webapp2.common   as common
% if obj.mixin.Python.hasModel():
from ${obj.mixin.Python.Model.filename} import ${obj.mixin.Python.Model.cls}
% endif
${ obj.table.leadIn }

# Needed during version migration
db = API.db


% if obj.mixin.Python.hasModel():
class ${obj.cls}( API.db.Model, ${obj.mixin.Python.Model.cls} ):
% else:
class ${obj.cls}( API.db.Model ):
% endif
    """Model for the ${obj.name} table, this is generated by the gencrud.py module
    When modifing the file make sure that you remove the table from the configuration.
    """
    __tablename__        = '${ obj.table.name }'
% for field in obj.table.columns:
    ${ '{:20}'.format( field.name ) } = ${ field.sqlAlchemyDef() }
% endfor
% for field in obj.table.columns:
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
    ${ '{:20}'.format( field.name + '_FK' ) } = db.relationship( '${ field.ui.service.baseClass }', foreign_keys=[ ${ field.name } ], lazy = True )
%  endif
% endfor
% for field in obj.table.columns:
 %if field.hasUniqueKey():
    db.UniqueConstraint( '${ field.name }', name='${field.uniqueKey}' )
 % endif
% endfor
% if obj.table.hasUniqueKey():
 % for index, fields in obj.table.uniqueKey.items():
    db.UniqueConstraint( ${ fields }, name='${ index }' )
 % endfor
% endif

    def memoryInstance( self ):
        return ${obj.cls}Memory( self )

    def toDict( self ):
        return self.dictionary

    @property
    def dictionary( self ):
        return {
% for field in obj.table.columns:
             "${ field.name }": self.${ field.name },
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
%   if field.definedNotNull():
             "${ field.name + '_FK'}": self.${ field.name }_FK.dictionary,
%   else:
             "${ field.name + '_FK'}": None if self.${ field.name }_FK is None else self.${ field.name }_FK.dictionary,
%   endif
%  endif
% endfor
        }

    def toSql( self ):
        data = self.dictionary
        values = repr( data.values() ).split( '[' )[ 1 ].split( ']' )[ 0 ]
        return "INSERT INTO {} ( {} ) VALUES ( {} )".format( self.__tablename__,
                                                             ", ".join( data.keys() ),
                                                             values )

    def __repr__( self ):
        result_fields = []
% for field in obj.table.columns:
        result_fields.append( "${field.name} = {}".format( self.${field.name} ) )
% endfor
        return "<${obj.cls} {}>".format( ", ".join( result_fields ) )

    def __str__( self ):
        return self.__repr__()

% if obj.table.hasAutoUpdate:
# standard decorator style
@event.listens_for( ${obj.cls}, 'before_update')
def receive_before_commit( mapper, connection, record ):
% for field in obj.table.columns:
% if field.hasAutoUpdate:
    record.${ field.name } = ${ field.autoUpdate }
% endif
% endfor
    return
% endif


class ${obj.cls}Memory( object ):
    def __init__( self, record = None, *args, **kwargs ):
        self.clear()
        self.set( record, **kwargs )
        return

    def clear( self ):
% for field in obj.table.columns:
        self.${ '{:24}'.format( field.name ) } = None
% endfor
% for field in obj.table.columns:
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
        self.${ '{:24}'.format( field.name + '_FK' ) } = None
%  endif
% endfor
        return

    def set( self, record = None, **kwargs ):
        if isinstance( record, ${obj.cls} ):
% for field in obj.table.columns:
            self.${ '{:30}'.format( field.name ) } = record.${ field.name }
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
%   if field.definedNotNull():
            self.${ '{:30}'.format( field.name + '_FK' ) } = record.${ field.name }_FK.dictionary
%   else:
            self.${ '{:30}'.format( field.name + '_FK' ) } = None if self.${ field.name }_FK is None else self.${ field.name }_FK.dictionary
%   endif
%  endif
% endfor

        for key, value in kwargs.items():
            setattr( self, key, value )

        return

    @classmethod
    def fetch( cls, *args, **kwargs ):
        query = API.db.session.query( ${obj.cls} )
        for condition in args:
            query = query.filter( condition )

        return cls( query.one() )

    @classmethod
    def fetch_many( cls, *args, **kwargs ):
        result = []
        query = API.db.session.query( ${obj.cls} )
        for condition in args:
            query = query.filter( condition )

        if 'order_by' in kwargs:
            query = query.order_by( kwargs[ 'order_by' ] + " " + kwargs.get( 'order_dir', 'asc' ) )

        return [ cls( record ) for record in query.all() ]

    def __repr__( self ):
        result = "<${obj.cls}Memory "
% for field in obj.table.columns:
        result += "${field.name} = {}, ".format( self.${field.name} )
% endfor
        result += ">"
        return result

    def __str__( self ):
        return self.__repr__()

    @property
    def dictionary( self ):
        return {
% for field in obj.table.columns:
             "${ field.name }": self.${ field.name },
%  if field.ui is not None and field.hasForeignKey() and field.ui.hasService():
%   if field.definedNotNull():
             "${ field.name + '_FK'}": self.${ field.name }_FK.dictionary,
%   else:
             "${ field.name + '_FK'}": None if self.${ field.name }_FK is None else self.${ field.name }_FK.dictionary,
%   endif
%  endif
% endfor
        }
