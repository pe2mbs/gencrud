/*
#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2020 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
*/
import { Component, OnInit, OnDestroy, Input } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { ${obj.cls}DataService } from './service';
import { ActivatedRoute, RouterLink, Router } from "@angular/router";
import { ${obj.cls}Record } from './model';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
import { PytSelectList } from '../../common/crud-dataservice';
<%
    break
%>
 % endif
% endfor
% for service in services.unique( 'class', 'path' ):
import { ${ service.cls } } from '${ service.path }';
% endfor
% if obj.mixin.Angular.hasScreenComponent():
import { ${ obj.mixin.Angular.ScreenComponent.cls } } from '${obj.mixin.Angular.ScreenComponent.filename}';
% else:
import { ScreenBaseComponent } from 'src/app/common/crud-screen-component';
% endif

@Component({
    selector: 'app-${obj.name}-screen',
    templateUrl: './screen.component.html',
    styleUrls: [ './screen.component.scss' ]
})
% if obj.mixin.Angular.hasScreenComponent():
export class Screen${obj.cls}Component extends ${ obj.mixin.Angular.ScreenComponent.cls } implements OnInit, OnDestroy
% else:
export class Screen${obj.cls}Component extends ScreenBaseComponent<${obj.cls}Record> implements OnInit, OnDestroy
% endif
{
% for field in obj.table.columns:
%  if field.ui is not None:
%   if field.ui.isPassword():
    public hide_${ field.name }: boolean  = true;
%   elif field.ui is not None:
%    if field.ui.hasResolveList():
    public ${ field.name }List = ${ field.ui.typescriptResolveList() }
%    endif
%   endif
%  endif
% endfor
% for service in services.unique( 'name' ):
    public ${ service.uniqueName( 'List' ) }: PytSelectList[];
% endfor

    constructor( route: ActivatedRoute
               , router: Router
               , public dataService: ${obj.cls}DataService
${ services.externalService }  )
    {
        super( 'Screen${obj.cls}Component', route, router );
        this.row = new ${obj.cls}Record();
        this.formGroup = new FormGroup( {
% for field in obj.table.columns:
%  if field.hasLabel():
            ${ field.name }: new FormControl( this.row.${ field.name } || ${ field.initValue },
                                              ${ field.validators } ),
%  endif
% endfor
        } );
        return;
    }

    ngOnInit()
    {
        if ( this.id === undefined || this.id === null )
        {
            this.registerSubscription( this.route.queryParams.subscribe( params => {
                console.log( params );
                this.id             = params.id;    // Contains the key field, currently only the primary key is supported.
                this.value          = params.value; // Contains val value for the key field.
                this.mode           = params.mode;  // edit or new, filter only supported on the table component.
                this.updateFixedValues( params )
            } ) );
        }
        super.ngOnInit();
        if ( this.value != null || this.value != undefined )
        {
            this.registerSubscription( this.dataService.getRecordById( this.value ).subscribe( record => {
                this.row = record;
                this.formGroup.patchValue( {
% for field in obj.table.columns:
                    ${ field.name }: this.row.${ field.name },
% endfor
                } );
                this.updateFixedValues();
                this.dataService.lockRecord( this.row );
            } ) );
        }
% for service in services.unique( 'name' ):
        this.registerSubscription( this.${ service.name }Service.getSelectList( '${ service.value }'
                                    , '${ service.label }'
%  if service.hasInitial():
                                    , ${ service.initial }
%  endif
%  if service.hasFinal():
                                    , ${ service.final }
%  endif
                                     ).subscribe( dataList => {
            this.${ service.uniqueName( 'List' ) } = dataList;
%  if field.hasAttribute( 'NULL' ):
            this.${ service.uniqueName( 'List' ) }.splice( 0, 0, { label: 'No ${ service.fieldLabel.lower() }', value: 0 } );
%  endif
        } ) );
% endfor
        return;
    }

% for field in obj.table.columns:
%  if field.frontend:
    public get ${ field.name }()
    {
        return ( this.formGroup.get( '${ field.name }' ) );
    }

%  endif
% endfor
}
