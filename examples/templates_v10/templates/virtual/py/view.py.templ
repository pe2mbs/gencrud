#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2023 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
#
from typing import Union, List
from flask import Blueprint, request, jsonify
import webapp2.api as API
from webapp2.common.crudabstract import CrudAbstractInterface, BaseFilter, TableFilter, PagedListBodyInput, GetColValueBodyInput, SelectListBodyInput
% if obj.mixin.Python.hasView():
from ${obj.mixin.Python.View.filename} import ${obj.mixin.Python.View.cls}
% endif
% if obj.table.hasEngine():
from ${obj.table.Engine.Module} import ${obj.table.Engine.Connect}
% endif


${ obj.name }Api = Blueprint( '${ root.application }.${ obj.name }Api', __name__ )


# Args is for downwards compatibility !!!!!
def registerApi( *args ):
    # Set the logger for the users module
    API.app.logger.info( 'Register ${ obj.cls } routes' )
    API.app.register_blueprint( ${ obj.name }Api )
    return

<%!
    def makeServiceFieldList( columns ):
        resultList = []
        for field in columns:
            if field.ui is not None:
                if field.hasForeignKey() and field.ui.hasService():
                    resultList.append( '"{}_FK"'.format( field.name ) )

                elif field.hasResolveList():
                    resultList.append( '"{}_LABEL"'.format( field.name ) )

        return ", ".join( resultList ) + ","

    def countServiceFieldList( columns ):
        count = 0
        for field in columns:
            if field.ui is not None and ( ( field.hasForeignKey() and field.ui.hasService() ) or field.hasResolveList() ):
                count += 1

        return count

    def makeForeignKeyFieldList( columns, nullable=False ):
        resultList = []
        for field in columns:
            if field.hasForeignKey() and (field.definedNotNull() if not nullable else field.definedNull() ):
                resultList.append( '"{}"'.format( field.name ) )

        return ", ".join( resultList ) + ","

    def countForeignKeyFieldList( columns, nullable=False ):
        cnt = 0
        for field in columns:
            if field.hasForeignKey() and (field.definedNotNull() if not nullable else field.definedNull() ):
                cnt += 1

        return cnt

    def makeInheritList( obj ):
        result = [ 'CrudAbstractInterface' ]
        if obj.mixin.Python.hasView():
            result.append( obj.mixin.Python.View.cls )

        return ', '.join( result )
%>
class ${ obj.cls }VirtualInterface( ${ makeInheritList( obj ) } ):
    _uri = '/api/${ obj.name }'

    def __init__( self ):
        CrudAbstractInterface.__init__( self, ${ obj.name }Api )
% if obj.mixin.Python.hasView():
        ${ obj.mixin.Python.View.cls }.__init__( self )
% endif
        return

    def makeFilter(self, query, filter: Union[List[BaseFilter], List[dict]], childFilters: List[TableFilter] = [],
                   model_cls=None):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'makeFilter' ):
            return ${ obj.mixin.Python.View.cls }.makeFilter( self, query, filter, childFilters )
% endif
        raise NotImplemented()

    @with_valid_input(body=PagedListBodyInput)
    def pagedList(self, body: PagedListBodyInput):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'pagedList' ):
            return ${ obj.mixin.Python.View.cls }.pagedList( self, body )
% endif
        raise NotImplemented()

    def filteredList(self, id, value):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'filteredList' ):
            return ${ obj.mixin.Python.View.cls }.filteredList( self, id, value )
% endif
        raise NotImplemented()

    def recordList(self):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordList' ):
            return ${ obj.mixin.Python.View.cls }.recordList( self )
% endif
        raise NotImplemented()

    def primaryKey(self, **kwargs):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'primaryKey' ):
            return ${ obj.mixin.Python.View.cls }.primaryKey( self, **kwargs )
% endif
        raise NotImplemented()

    def newRecord(self, **kwargs):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'newRecord' ):
            return ${ obj.mixin.Python.View.cls }.newRecord( self, **kwargs )
% endif
        raise NotImplemented()

    def recordGet( self, **kwargs ):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordGet' ):
            return ${ obj.mixin.Python.View.cls }.recordGet( self, **kwargs )
% endif
        raise NotImplemented()

    def recordGetId( self, id, **kwargs ):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordGetId' ):
            return ${ obj.mixin.Python.View.cls }.recordGetId( self, id, **kwargs )
% endif
        raise NotImplemented()

    @with_valid_input(body=GetColValueBodyInput)
    def recordGetColValue(self, body: GetColValueBodyInput):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordGetColValue' ):
            return ${ obj.mixin.Python.View.cls }.recordGetColValue( self, body )
% endif
        raise NotImplemented()

    def recordDelete(self, id, **kwargs):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordDelete' ):
            return ${ obj.mixin.Python.View.cls }.recordDelete( self, id, **kwargs )
% endif
        raise NotImplemented()

    def updateRecord(self, data: dict, record: any, user=None):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordDelete' ):
            return ${ obj.mixin.Python.View.cls }.recordDelete( self, data, record, user )
% endif
        raise NotImplemented()

    def recordPut(self, **kwargs):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordPut' ):
            return ${ obj.mixin.Python.View.cls }.recordPut( self, **kwargs )
% endif
        raise NotImplemented()

    def recordPatch(self, **kwargs):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordPatch' ):
            return ${ obj.mixin.Python.View.cls }.recordPatch( self, **kwargs )
% endif
        raise NotImplemented()

    @with_valid_input(body=SelectListBodyInput)
    def selectList(self, body: SelectListBodyInput):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'selectList' ):
            return ${ obj.mixin.Python.View.cls }.selectList( self, body )
% endif
        raise NotImplemented()

    def recordCount(self):
% if obj.mixin.Python.hasView():
        if hasattr( ${ obj.mixin.Python.View.cls }, 'recordCount' ):
            return ${ obj.mixin.Python.View.cls }.recordCount( self )
% endif
        raise NotImplemented()


${ obj.name } = ${ obj.cls }VirtualInterface()
